/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Marry3,
  Marry3Interface,
} from "../../../../contracts/marry3/marry3.sol/Marry3";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "CANNOT_TRANSFER_TO_ZERO_ADDRESS",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NOT_CURRENT_OWNER",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addressA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_addressB",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_signatureB",
        type: "bytes",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addressA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_addressB",
        type: "address",
      },
    ],
    name: "burnByOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getMarryCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addressA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_addressB",
        type: "address",
      },
      {
        internalType: "enum ERC520.Sex",
        name: "_sexA",
        type: "uint8",
      },
      {
        internalType: "enum ERC520.Sex",
        name: "_sexB",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "_signatureB",
        type: "bytes",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addressA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_addressB",
        type: "address",
      },
      {
        internalType: "enum ERC520.Sex",
        name: "_sexA",
        type: "uint8",
      },
      {
        internalType: "enum ERC520.Sex",
        name: "_sexB",
        type: "uint8",
      },
    ],
    name: "mintByOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_nonce",
        type: "string",
      },
    ],
    name: "updateBurnNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_nonce",
        type: "string",
      },
    ],
    name: "updateNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_priceMax",
        type: "uint256",
      },
    ],
    name: "updatePriceMax",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60c060405260066080819052651a481dda5b1b60d21b60a0908152620000299160029190620000cd565b506040805180820190915260048082526366696e6560e01b60209092019182526200005791600391620000cd565b5067016345785d8a000060045560016005553480156200007657600080fd5b506040516200190e3803806200190e833981016040819052620000999162000173565b60008054336001600160a01b031991821617909155600180549091166001600160a01b0392909216919091179055620001e2565b828054620000db90620001a5565b90600052602060002090601f016020900481019282620000ff57600085556200014a565b82601f106200011a57805160ff19168380011785556200014a565b828001600101855582156200014a579182015b828111156200014a5782518255916020019190600101906200012d565b50620001589291506200015c565b5090565b5b808211156200015857600081556001016200015d565b6000602082840312156200018657600080fd5b81516001600160a01b03811681146200019e57600080fd5b9392505050565b600181811c90821680620001ba57607f821691505b60208210811415620001dc57634e487b7160e01b600052602260045260246000fd5b50919050565b61171c80620001f26000396000f3fe6080604052600436106100d55760003560e01c80638da5cb5b11610079578063be186b7611610056578063be186b7614610241578063f2fde38b14610261578063f3fe3bc314610281578063fb927624146102b357005b80638da5cb5b146101d457806398d5fdca1461020c5780639a7f43631461022157005b80633e8986a4116100b25780633e8986a41461013557806351cff8d91461015557806351e3f54414610175578063860d248a1461019557005b80630f7a4612146100de578063305b95b71461010257806332c27e011461011557005b366100dc57005b005b3480156100ea57600080fd5b506005545b6040519081526020015b60405180910390f35b6100dc6101103660046112b3565b6102c6565b34801561012157600080fd5b506100dc610130366004611329565b610583565b34801561014157600080fd5b506100dc61015036600461137a565b6105e4565b34801561016157600080fd5b506100dc610170366004611393565b610633565b34801561018157600080fd5b506100dc610190366004611329565b610725565b3480156101a157600080fd5b506101c76040518060400160405280600681526020016518189c18181960d11b81525081565b6040516100f991906113b0565b3480156101e057600080fd5b506000546101f4906001600160a01b031681565b6040516001600160a01b0390911681526020016100f9565b34801561021857600080fd5b506100ef610782565b34801561022d57600080fd5b506100dc61023c366004611419565b610791565b34801561024d57600080fd5b506100dc61025c366004611471565b61085f565b34801561026d57600080fd5b506100dc61027c366004611393565b610914565b34801561028d57600080fd5b506101c76040518060400160405280600681526020016530313830303160d01b81525081565b6100dc6102c13660046114aa565b610a16565b60005460408051808201909152600681526530313830303160d01b6020820152906001600160a01b031633146103185760405162461bcd60e51b815260040161030f91906113b0565b60405180910390fd5b5034610322610c9b565b61032d906002611578565b1161036a5760405162461bcd60e51b815260206004820152600d60248201526c0dcde40cadcdeeaced040cae8d609b1b604482015260640161030f565b6001600160a01b0383166103cc5760405162461bcd60e51b815260206004820152602360248201527f61646472657373412063616e6e6f7420626520746865207a65726f206164647260448201526265737360e81b606482015260840161030f565b6001600160a01b03821661042e5760405162461bcd60e51b815260206004820152602360248201527f61646472657373422063616e6e6f7420626520746865207a65726f206164647260448201526265737360e81b606482015260840161030f565b6104cb6104c46003805461044190611597565b80601f016020809104026020016040519081016040528092919081815260200182805461046d90611597565b80156104ba5780601f1061048f576101008083540402835291602001916104ba565b820191906000526020600020905b81548152906001019060200180831161049d57829003601f168201915b5050505050610d39565b8284610d69565b6105175760405162461bcd60e51b815260206004820152601260248201527f496e76616c6964207369676e61747572652e0000000000000000000000000000604482015260640161030f565b6001546040516327fc84a360e01b81526001600160a01b0385811660048301528481166024830152909116906327fc84a390604401600060405180830381600087803b15801561056657600080fd5b505af115801561057a573d6000803e3d6000fd5b50505050505050565b60005460408051808201909152600681526530313830303160d01b6020820152906001600160a01b031633146105cc5760405162461bcd60e51b815260040161030f91906113b0565b5080516105e0906003906020840190611179565b5050565b60005460408051808201909152600681526530313830303160d01b6020820152906001600160a01b0316331461062d5760405162461bcd60e51b815260040161030f91906113b0565b50600455565b60005460408051808201909152600681526530313830303160d01b6020820152906001600160a01b0316331461067c5760405162461bcd60e51b815260040161030f91906113b0565b5060405147906000906001600160a01b0384169083908381818185875af1925050503d80600081146106ca576040519150601f19603f3d011682016040523d82523d6000602084013e6106cf565b606091505b50509050806107205760405162461bcd60e51b815260206004820152601060248201527f5769746864726177206661696c65642e00000000000000000000000000000000604482015260640161030f565b505050565b60005460408051808201909152600681526530313830303160d01b6020820152906001600160a01b0316331461076e5760405162461bcd60e51b815260040161030f91906113b0565b5080516105e0906002906020840190611179565b600061078c610c9b565b905090565b60005460408051808201909152600681526530313830303160d01b6020820152906001600160a01b031633146107da5760405162461bcd60e51b815260040161030f91906113b0565b50600154604051636c0c085960e11b81526001600160a01b039091169063d81810b29061081190879087908790879060040161160a565b600060405180830381600087803b15801561082b57600080fd5b505af115801561083f573d6000803e3d6000fd5b50506005805492509050600061085483611645565b919050555050505050565b60005460408051808201909152600681526530313830303160d01b6020820152906001600160a01b031633146108a85760405162461bcd60e51b815260040161030f91906113b0565b506001546040516327fc84a360e01b81526001600160a01b0384811660048301528381166024830152909116906327fc84a390604401600060405180830381600087803b1580156108f857600080fd5b505af115801561090c573d6000803e3d6000fd5b505050505050565b60005460408051808201909152600681526530313830303160d01b6020820152906001600160a01b0316331461095d5760405162461bcd60e51b815260040161030f91906113b0565b5060408051808201909152600681526518189c18181960d11b60208201526001600160a01b0382166109a25760405162461bcd60e51b815260040161030f91906113b0565b50600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b34610a1f610c9b565b11610a5c5760405162461bcd60e51b815260206004820152600d60248201526c0dcde40cadcdeeaced040cae8d609b1b604482015260640161030f565b6001600160a01b038616610abe5760405162461bcd60e51b815260206004820152602360248201527f61646472657373412063616e6e6f7420626520746865207a65726f206164647260448201526265737360e81b606482015260840161030f565b6001600160a01b038516610b205760405162461bcd60e51b815260206004820152602360248201527f61646472657373422063616e6e6f7420626520746865207a65726f206164647260448201526265737360e81b606482015260840161030f565b6001600160a01b0386163314610b785760405162461bcd60e51b815260206004820152601f60248201527f6164647265737341206d75737420626520746865206d73672e73656e64657200604482015260640161030f565b610bc9610b8b6002805461044190611597565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250610d69915050565b610c155760405162461bcd60e51b815260206004820152601260248201527f496e76616c6964207369676e61747572652e0000000000000000000000000000604482015260640161030f565b600154604051636c0c085960e11b81526001600160a01b039091169063d81810b290610c4b90899089908990899060040161160a565b600060405180830381600087803b158015610c6557600080fd5b505af1158015610c79573d6000803e3d6000fd5b505060058054925090506000610c8e83611645565b9190505550505050505050565b60008060645b8060ff1660055410158015610cba575060098260ff1611155b15610cf45781610cc981611660565b9250610cd89050826001611680565b610ce39060646116a5565b610ced9082611680565b9050610ca1565b6000610d0a60ff8416662386f26fc10000611578565b610d1b90662386f26fc100006116ce565b9050600454811115610d2f57600454610d31565b805b935050505090565b600081604051602001610d4c91906113b0565b604051602081830303815290604052805190602001209050919050565b6000816001600160a01b0316610d7f8585610d91565b6001600160a01b031614949350505050565b6000610da682610da085610dad565b90610de8565b9392505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01610d4c565b6000806000610df78585610e0c565b91509150610e0481610e7c565b509392505050565b600080825160411415610e435760208301516040840151606085015160001a610e378782858561103a565b94509450505050610e75565b825160401415610e6d5760208301516040840151610e62868383611127565b935093505050610e75565b506000905060025b9250929050565b6000816004811115610e9057610e906115d2565b1415610e995750565b6001816004811115610ead57610ead6115d2565b1415610efb5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161030f565b6002816004811115610f0f57610f0f6115d2565b1415610f5d5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161030f565b6003816004811115610f7157610f716115d2565b1415610fca5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161030f565b6004816004811115610fde57610fde6115d2565b14156110375760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161030f565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611071575060009050600361111e565b8460ff16601b1415801561108957508460ff16601c14155b1561109a575060009050600461111e565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156110ee573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166111175760006001925092505061111e565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168161115d60ff86901c601b6116ce565b905061116b8782888561103a565b935093505050935093915050565b82805461118590611597565b90600052602060002090601f0160209004810192826111a757600085556111ed565b82601f106111c057805160ff19168380011785556111ed565b828001600101855582156111ed579182015b828111156111ed5782518255916020019190600101906111d2565b506111f99291506111fd565b5090565b5b808211156111f957600081556001016111fe565b6001600160a01b038116811461103757600080fd5b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561125857611258611227565b604051601f8501601f19908116603f0116810190828211818310171561128057611280611227565b8160405280935085815286868601111561129957600080fd5b858560208301376000602087830101525050509392505050565b6000806000606084860312156112c857600080fd5b83356112d381611212565b925060208401356112e381611212565b9150604084013567ffffffffffffffff8111156112ff57600080fd5b8401601f8101861361131057600080fd5b61131f8682356020840161123d565b9150509250925092565b60006020828403121561133b57600080fd5b813567ffffffffffffffff81111561135257600080fd5b8201601f8101841361136357600080fd5b6113728482356020840161123d565b949350505050565b60006020828403121561138c57600080fd5b5035919050565b6000602082840312156113a557600080fd5b8135610da681611212565b600060208083528351808285015260005b818110156113dd578581018301518582016040015282016113c1565b818111156113ef576000604083870101525b50601f01601f1916929092016040019392505050565b80356003811061141457600080fd5b919050565b6000806000806080858703121561142f57600080fd5b843561143a81611212565b9350602085013561144a81611212565b925061145860408601611405565b915061146660608601611405565b905092959194509250565b6000806040838503121561148457600080fd5b823561148f81611212565b9150602083013561149f81611212565b809150509250929050565b60008060008060008060a087890312156114c357600080fd5b86356114ce81611212565b955060208701356114de81611212565b94506114ec60408801611405565b93506114fa60608801611405565b9250608087013567ffffffffffffffff8082111561151757600080fd5b818901915089601f83011261152b57600080fd5b81358181111561153a57600080fd5b8a602082850101111561154c57600080fd5b6020830194508093505050509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561159257611592611562565b500290565b600181811c908216806115ab57607f821691505b602082108114156115cc57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052602160045260246000fd5b6003811061160657634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038581168252841660208201526080810161162f60408301856115e8565b61163c60608301846115e8565b95945050505050565b600060001982141561165957611659611562565b5060010190565b600060ff821660ff81141561167757611677611562565b60010192915050565b600060ff821660ff84168060ff0382111561169d5761169d611562565b019392505050565b600060ff821660ff84168160ff04811182151516156116c6576116c6611562565b029392505050565b600082198211156116e1576116e1611562565b50019056fea26469706673582212202e4a2a663b3bd49ab77c1aae66bf50aee95a4be6cf5f9559b32d581d0522375664736f6c63430008090033";

type Marry3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Marry3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Marry3__factory extends ContractFactory {
  constructor(...args: Marry3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Marry3> {
    return super.deploy(_token, overrides || {}) as Promise<Marry3>;
  }
  override getDeployTransaction(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override attach(address: string): Marry3 {
    return super.attach(address) as Marry3;
  }
  override connect(signer: Signer): Marry3__factory {
    return super.connect(signer) as Marry3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Marry3Interface {
    return new utils.Interface(_abi) as Marry3Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Marry3 {
    return new Contract(address, _abi, signerOrProvider) as Marry3;
  }
}
